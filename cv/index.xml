<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cvs on PJ&#39;s Pages</title>
    <link>http://jatin3893.github.io/cv/</link>
    <description>Recent content in Cvs on PJ&#39;s Pages</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 24 Jun 2015 20:36:57 +0530</lastBuildDate>
    <atom:link href="http://jatin3893.github.io/cv/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Extract RGB Channels</title>
      <link>http://jatin3893.github.io/CV/ChannelSeparation/</link>
      <pubDate>Wed, 24 Jun 2015 20:36:57 +0530</pubDate>
      
      <guid>http://jatin3893.github.io/CV/ChannelSeparation/</guid>
      <description>&lt;script src=&#34;http://jatin3893.github.io/scripts/cv/tracking-min.js&#34;&gt;&lt;/script&gt;
&lt;video id=&#34;myVideo&#34; width=&#34;200&#34; height=&#34;150&#34; preload autoplay loop muted&gt;&lt;/video&gt;&lt;br&gt;
&lt;canvas id=&#34;channelR&#34; class = &#34;outputchannel&#34; width=&#34;200&#34; height=&#34;150&#34;&gt;&lt;/canvas&gt;
&lt;canvas id=&#34;channelG&#34; class = &#34;outputchannel&#34; width=&#34;200&#34; height=&#34;150&#34;&gt;&lt;/canvas&gt;
&lt;canvas id=&#34;channelB&#34; class = &#34;outputchannel&#34; width=&#34;200&#34; height=&#34;150&#34;&gt;&lt;/canvas&gt;

&lt;script&gt;
    canvasR = document.getElementById(&#39;channelR&#39;);
    canvasG = document.getElementById(&#39;channelG&#39;);
    canvasB = document.getElementById(&#39;channelB&#39;);

    contextR = canvasR.getContext(&#39;2d&#39;);
    contextG = canvasG.getContext(&#39;2d&#39;);
    contextB = canvasB.getContext(&#39;2d&#39;);

    imageDataR = contextR.createImageData(canvasR.width, canvasR.height);
    imageDataG = contextG.createImageData(canvasG.width, canvasG.height);
    imageDataB = contextB.createImageData(canvasB.width, canvasB.height);

    tracking.MyTracker = function() {
        tracking.MyTracker.base(this, &#39;constructor&#39;);
    }
    tracking.inherits(tracking.MyTracker, tracking.Tracker);

    tracking.MyTracker.prototype.track = function(pixels, width, height) {
        // Your tracking logic here
        pixelsRed = new Uint8Array(pixels.length);
        pixelsGreen = new Uint8Array(pixels.length);
        pixelsBlue = new Uint8Array(pixels.length);

        height = canvasR.height
        width = canvasR.width
        for (i = 0; i &lt; width; i++) {
            for (j = 0; j &lt; height; j++) {
                index = (i + j * width) * 4;
                pixelsRed[index + 0] = pixels[index + 0];
                pixelsGreen[index + 1] = pixels[index + 1];
                pixelsBlue[index + 2] = pixels[index + 2];
            }
        }

        this.emit(&#39;track&#39;, {
            channel: {
                red: pixelsRed,
                green: pixelsGreen,
                blue: pixelsBlue
            }
        });
    }

    var myTracker = new tracking.MyTracker()
    myTracker.on(&#39;track&#39;, function(event) {
        height = canvasR.height
        width = canvasR.width
        for (i = 0; i &lt; width; i++){
            for (j = 0; j &lt; height; j++) {
                index = (i + j * width) * 4;
                imageDataR.data[index + 0] = event.channel.red[index + 0];
                imageDataG.data[index + 1] = event.channel.green[index + 1];
                imageDataB.data[index + 2] = event.channel.blue[index + 2];

                imageDataR.data[index + 3] = 255;
                imageDataG.data[index + 3] = 255;
                imageDataB.data[index + 3] = 255;

            }
        }
        contextR.putImageData(imageDataR, 0, 0);
        contextG.putImageData(imageDataG, 0, 0);
        contextB.putImageData(imageDataB, 0, 0);

    })
    window.onload = function() {
        // note here that &#39;camera&#39; is set to true, I believe this tells tracking.js to use
        // the webcam.
        tracking.track(&#39;#myVideo&#39;, myTracker, {
            camera: true
        });
  }
&lt;/script&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
    .outputchannel {
        display: inline-block;
    }
&lt;/style&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CV Hello World</title>
      <link>http://jatin3893.github.io/CV/CVHello/</link>
      <pubDate>Sun, 07 Jun 2015 22:21:42 +0530</pubDate>
      
      <guid>http://jatin3893.github.io/CV/CVHello/</guid>
      <description>&lt;p&gt;Computer Vision Hello World.
My first post on how to access your webcam from JS using &lt;a href=&#34;http://trackingjs.com/&#34;&gt;tracking.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tracking.js is a Java script based Open Source Computer Vision library
I have just started using it. So I don&amp;rsquo;t know much about its pros or cons, but it sure looks good enough to try once.&lt;/p&gt;

&lt;p&gt;Here is a small example which is a little beyond the scope of a Hello World. You can find the [hello world examples here]()&lt;/p&gt;

&lt;p&gt;Here, I explain the basics of how to track something (color, object etc.) based on your own logic implemented in your own custom trackers implemented over the framework designed in tracking.js&lt;/p&gt;

&lt;script src=&#34;http://jatin3893.github.io/scripts/cv/tracking-min.js&#34;&gt;&lt;/script&gt;
&lt;video id=&#34;myVideo&#34; width=&#34;400&#34; height=&#34;300&#34; preload autoplay loop muted&gt;&lt;/video&gt;
&lt;script&gt;
    tracking.MyTracker = function() {
        tracking.MyTracker.base(this, &#39;constructor&#39;);
    }
    tracking.inherits(tracking.MyTracker, tracking.Tracker);

    tracking.MyTracker.prototype.track = function(pixels, width, height) {
        // Do the processing as required
        console.log(pixels.length);
        
        this.emit(&#39;track&#39;, {
            data: &#39;Some Data&#39;
        });
    }

    var myTracker = new tracking.MyTracker()
    myTracker.on(&#39;track&#39;, function(event) {
        // What to do on obtaining track
    })

    window.onload = function() {
        tracking.track(&#39;#myVideo&#39;, myTracker, {
            camera: true
        });
  }
&lt;/script&gt; 

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Import tracking.js library from its appropriate path --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&#34;na&#34;&gt;src=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/scripts/cv/tracking-min.js&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;&amp;lt;!-- Display the captured frames in the specified height/width --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;myVideo&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;300&amp;quot;&lt;/span&gt; 
            &lt;span class=&#34;na&#34;&gt;preload&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;autoplay&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;loop&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;muted&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Implementing the custom tracker known as MyTracker&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyTracker&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyTracker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;constructor&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;inherits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyTracker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Tracker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Override the track function of the tracker and &lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// implement your own logic inside here.&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyTracker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;prototype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;track&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 
        &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pixels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// Your tracking logic here&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Emit the generated result as a JSON object&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;emit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Some result&amp;quot;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Initialise a tracker object&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myTracker&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyTracker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Specify what is to be done on the signal&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;myTracker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;// Start tracking using the custom tracker object&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onload&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;tracking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;track&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;#myVideo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;myTracker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nx&#34;&gt;camera&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Colour Tracking</title>
      <link>http://jatin3893.github.io/CV/ColourTracking/</link>
      <pubDate>Sat, 13 Jun 2015 00:35:28 +0530</pubDate>
      
      <guid>http://jatin3893.github.io/CV/ColourTracking/</guid>
      <description>&lt;p&gt;A small example to track single colour in an Image.&lt;/p&gt;

&lt;script src=&#34;http://jatin3893.github.io/scripts/cv/tracking-min.js&#34;&gt;&lt;/script&gt;
&lt;video id=&#34;myVideo&#34; width=&#34;200&#34; height=&#34;150&#34; preload autoplay loop muted&gt;&lt;/video&gt;&lt;br&gt;
&lt;canvas id=&#34;trackingOutput&#34; class = &#34;outputchannel&#34; width=&#34;200&#34; height=&#34;150&#34; style = &#34;border:1px solid #000000&#34;&gt;&lt;/canvas&gt;

&lt;script&gt;
    outputCanvas = document.getElementById(&#39;trackingOutput&#39;);
    outputContext = outputCanvas.getContext(&#39;2d&#39;);
    outputImageData = outputContext.createImageData(outputCanvas.width, outputCanvas.height);
    
    trackColor = [120, 120, 120];
    inRange = function(color1, color2) {
        delta = 10;
        diff = color1 &gt; color2 ? color1 - color2 : color2 - color1;
        return diff &lt;= delta;
    }
    
    tracking.MyTracker = function() {
        tracking.MyTracker.base(this, &#39;constructor&#39;);
    }
    tracking.inherits(tracking.MyTracker, tracking.Tracker);

    tracking.MyTracker.prototype.track = function(pixels, width, height) {
        // Your tracking logic here
        trackedImageData = new Uint8Array(pixels.length);

        height = outputCanvas.height
        width = outputCanvas.width
        for (i = 0; i &lt; width; i++) {
            for (j = 0; j &lt; height; j++) {
                index = (i + j * width) * 4;
                if (inRange(pixels[index + 0], trackColor[0]) &amp;&amp; 
                        inRange(pixels[index + 1], trackColor[1]) &amp;&amp; 
                            inRange(pixels[index + 2], trackColor[2])) {
                    trackedImageData[index + 0] = 255;
                    trackedImageData[index + 1] = 255;
                    trackedImageData[index + 2] = 255;
                }
                trackedImageData[index + 3] = pixels[index + 3];
            }
        }

        this.emit(&#39;track&#39;, {
            output: trackedImageData,
        });
    }

    var myTracker = new tracking.MyTracker()
    myTracker.on(&#39;track&#39;, function(event) {
        height = outputCanvas.height
        width = outputCanvas.width
        for (i = 0; i &lt; width; i++){
            for (j = 0; j &lt; height; j++) {
                index = (i + j * width) * 4;
                outputImageData.data[index + 0] = event.output[index + 0];
                outputImageData.data[index + 1] = event.output[index + 1];
                outputImageData.data[index + 2] = event.output[index + 2];
                outputImageData.data[index + 3] = event.output[index + 3];
            }
        }
        outputContext.putImageData(outputImageData, 0, 0);

    })
    window.onload = function() {
        // note here that &#39;camera&#39; is set to true, I believe this tells tracking.js to use
        // the webcam.
        tracking.track(&#39;#myVideo&#39;, myTracker, {
            camera: true
        });
  }
&lt;/script&gt;
</description>
    </item>
    
  </channel>
</rss>